substitutions:
  devicename: esp8266_01
  upper_devicename: ESP8266_01
  default_update_interval: 60s

esphome:
  name: ${devicename}
  platform: ESP8266
  board: nodemcuv2

wifi:
  ssid: !secret base_wifi_ssid
  password: !secret base_wifi_password
  manual_ip:
    static_ip: 192.168.1.21
    gateway: 192.168.1.1
    subnet: 255.255.255.0

sensor:
  - platform: dht
    pin: D2
    model: AM2302
    temperature:
      name: ${upper_devicename} Temperature
    humidity:
      name: ${upper_devicename} Humidity
    update_interval: ${default_update_interval}
  - platform: uptime
    id: uptime_s
    update_interval: 15s
    internal: true
  - platform: wifi_signal
    name: ${upper_devicename} WiFi Signal
    id: ${devicename}_wifi_signal
    update_interval: ${default_update_interval}

binary_sensor:
  - platform: status
    name: ${upper_devicename} Status
    
text_sensor:
  - platform: version
    name: ${upper_devicename} ESPHome Version
    id: ${devicename}_esphome_version
  - platform: template
    name: ${upper_devicename} Uptime
    lambda: |-
      uint32_t dur = id(uptime_s).state;
      int dys = 0;
      int hrs = 0;
      int mnts = 0;
      if (dur > 86399) {
        dys = trunc(dur / 86400);
        dur = dur - (dys * 86400);
      }
      if (dur > 3599) {
        hrs = trunc(dur / 3600);
        dur = dur - (hrs * 3600);
      }
      if (dur > 59) {
        mnts = trunc(dur / 60);
        dur = dur - (mnts * 60);
      }
      char buffer[17];
      sprintf(buffer, "%ud %02uh %02um %02us", dys, hrs, mnts, dur);
      return {buffer};
    icon: mdi:clock-start
    update_interval: 15s

status_led:
  pin:
    number: D1

logger:

api:
  password: !secret esp8266_01_api_password

ota:
  password: !secret esp8266_01_ota_password